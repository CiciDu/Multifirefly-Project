{
    "policy_class": {
        ":type:": "<class 'abc.ABCMeta'>",
        ":serialized:": "gASVMAAAAAAAAACMHnN0YWJsZV9iYXNlbGluZXMzLnNhYy5wb2xpY2llc5SMCVNBQ1BvbGljeZSTlC4=",
        "__module__": "stable_baselines3.sac.policies",
        "__doc__": "\n    Policy class (with both actor and critic) for SAC.\n\n    :param observation_space: Observation space\n    :param action_space: Action space\n    :param lr_schedule: Learning rate schedule (could be constant)\n    :param net_arch: The specification of the policy and value networks.\n    :param activation_fn: Activation function\n    :param use_sde: Whether to use State Dependent Exploration or not\n    :param log_std_init: Initial value for the log standard deviation\n    :param sde_net_arch: Network architecture for extracting features\n        when using gSDE. If None, the latent features from the policy will be used.\n        Pass an empty list to use the states as features.\n    :param use_expln: Use ``expln()`` function instead of ``exp()`` when using gSDE to ensure\n        a positive standard deviation (cf paper). It allows to keep variance\n        above zero and prevent it from growing too fast. In practice, ``exp()`` is usually enough.\n    :param clip_mean: Clip the mean output when using gSDE to avoid numerical instability.\n    :param features_extractor_class: Features extractor to use.\n    :param features_extractor_kwargs: Keyword arguments\n        to pass to the features extractor.\n    :param normalize_images: Whether to normalize images or not,\n         dividing by 255.0 (True by default)\n    :param optimizer_class: The optimizer to use,\n        ``th.optim.Adam`` by default\n    :param optimizer_kwargs: Additional keyword arguments,\n        excluding the learning rate, to pass to the optimizer\n    :param n_critics: Number of critic networks to create.\n    :param share_features_extractor: Whether to share or not the features extractor\n        between the actor and the critic (this saves computation time)\n    ",
        "__init__": "<function SACPolicy.__init__ at 0x7fbca8f0acb0>",
        "_build": "<function SACPolicy._build at 0x7fbca8f0ad40>",
        "_get_constructor_parameters": "<function SACPolicy._get_constructor_parameters at 0x7fbca8f0add0>",
        "reset_noise": "<function SACPolicy.reset_noise at 0x7fbca8f0ae60>",
        "make_actor": "<function SACPolicy.make_actor at 0x7fbca8f0aef0>",
        "make_critic": "<function SACPolicy.make_critic at 0x7fbca8f0af80>",
        "forward": "<function SACPolicy.forward at 0x7fbca8f0e050>",
        "_predict": "<function SACPolicy._predict at 0x7fbca8f0e0e0>",
        "set_training_mode": "<function SACPolicy.set_training_mode at 0x7fbca8f0e170>",
        "__abstractmethods__": "frozenset()",
        "_abc_impl": "<_abc_data object at 0x7fbca8f7b720>"
    },
    "verbose": 0,
    "policy_kwargs": {
        ":type:": "<class 'dict'>",
        ":serialized:": "gASVWgAAAAAAAAB9lCiMDWFjdGl2YXRpb25fZm6UjBt0b3JjaC5ubi5tb2R1bGVzLmFjdGl2YXRpb26UjARUYW5olJOUjAhuZXRfYXJjaJRdlChLgEuAZYwHdXNlX3NkZZSJdS4=",
        "activation_fn": "<class 'torch.nn.modules.activation.Tanh'>",
        "net_arch": [
            128,
            128
        ],
        "use_sde": false
    },
    "observation_space": {
        ":type:": "<class 'gym.spaces.box.Box'>",
        ":serialized:": "gASVwgEAAAAAAACMDmd5bS5zcGFjZXMuYm94lIwDQm94lJOUKYGUfZQojAVkdHlwZZSMBW51bXB5lGgFk5SMAmY0lImIh5RSlChLA4wBPJROTk5K/////0r/////SwB0lGKMBXNoYXBllEsIhZSMA2xvd5SMFW51bXB5LmNvcmUubXVsdGlhcnJheZSMDF9yZWNvbnN0cnVjdJSTlGgGjAduZGFycmF5lJOUSwCFlEMBYpSHlFKUKEsBSwiFlGgKiUMgAACAvwAAgL8AAIC/AACAvwAAgL8AAIC/AACAvwAAgL+UdJRijARoaWdolGgSaBRLAIWUaBaHlFKUKEsBSwiFlGgKiUMgAACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD+UdJRijA1ib3VuZGVkX2JlbG93lGgSaBRLAIWUaBaHlFKUKEsBSwiFlGgHjAJiMZSJiIeUUpQoSwOMAXyUTk5OSv////9K/////0sAdJRiiUMIAQEBAQEBAQGUdJRijA1ib3VuZGVkX2Fib3ZllGgSaBRLAIWUaBaHlFKUKEsBSwiFlGgqiUMIAQEBAQEBAQGUdJRijApfbnBfcmFuZG9tlE51Yi4=",
        "dtype": "float32",
        "shape": [
            8
        ],
        "low": "[-1. -1. -1. -1. -1. -1. -1. -1.]",
        "high": "[1. 1. 1. 1. 1. 1. 1. 1.]",
        "bounded_below": "[ True  True  True  True  True  True  True  True]",
        "bounded_above": "[ True  True  True  True  True  True  True  True]",
        "_np_random": null
    },
    "action_space": {
        ":type:": "<class 'gym.spaces.box.Box'>",
        ":serialized:": "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",
        "dtype": "float32",
        "shape": [
            2
        ],
        "low": "[-1. -1.]",
        "high": "[1. 1.]",
        "bounded_below": "[ True  True]",
        "bounded_above": "[ True  True]",
        "_np_random": "RandomState(MT19937)"
    },
    "n_envs": 1,
    "num_timesteps": 6600000,
    "_total_timesteps": 50000000,
    "_num_timesteps_at_start": 0,
    "seed": null,
    "action_noise": null,
    "start_time": 1660190762.7097201,
    "learning_rate": 0.0015,
    "tensorboard_log": null,
    "lr_schedule": {
        ":type:": "<class 'function'>",
        ":serialized:": "gASVXwIAAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwOX2ZpbGxfZnVuY3Rpb26Uk5QoaACMD19tYWtlX3NrZWxfZnVuY5STlGgAjA1fYnVpbHRpbl90eXBllJOUjAhDb2RlVHlwZZSFlFKUKEsBSwBLAUsBSxNDBIgAUwCUToWUKYwBX5SFlIxIL3Vzci9sb2NhbC9saWIvcHl0aG9uMy43L2Rpc3QtcGFja2FnZXMvc3RhYmxlX2Jhc2VsaW5lczMvY29tbW9uL3V0aWxzLnB5lIwEZnVuY5RLgEMCAAGUjAN2YWyUhZQpdJRSlEsBfZQojAtfX3BhY2thZ2VfX5SMGHN0YWJsZV9iYXNlbGluZXMzLmNvbW1vbpSMCF9fbmFtZV9flIwec3RhYmxlX2Jhc2VsaW5lczMuY29tbW9uLnV0aWxzlIwIX19maWxlX1+UjEgvdXNyL2xvY2FsL2xpYi9weXRob24zLjcvZGlzdC1wYWNrYWdlcy9zdGFibGVfYmFzZWxpbmVzMy9jb21tb24vdXRpbHMucHmUdYeUUpR9lCiMB2dsb2JhbHOUfZSMCGRlZmF1bHRzlE6MBGRpY3SUfZSMDmNsb3N1cmVfdmFsdWVzlF2URz9Yk3S8an76YYwGbW9kdWxllGgZjARuYW1llGgPjANkb2OUTowXX2Nsb3VkcGlja2xlX3N1Ym1vZHVsZXOUXZSMC2Fubm90YXRpb25zlH2UjAhxdWFsbmFtZZSMGWNvbnN0YW50X2ZuLjxsb2NhbHM+LmZ1bmOUjAprd2RlZmF1bHRzlE51dFIu"
    },
    "_last_obs": {
        ":type:": "<class 'numpy.ndarray'>",
        ":serialized:": "gASVqgAAAAAAAACMFW51bXB5LmNvcmUubXVsdGlhcnJheZSMDF9yZWNvbnN0cnVjdJSTlIwFbnVtcHmUjAduZGFycmF5lJOUSwCFlEMBYpSHlFKUKEsBSwFLCIaUaAOMBWR0eXBllJOUjAJmNJSJiIeUUpQoSwOMATyUTk5OSv////9K/////0sAdJRiiUMgAAAAAAAAAAAAAMhDAAAAAAAAAAAAAAAAAADIQwAAAACUdJRiLg=="
    },
    "_last_episode_starts": {
        ":type:": "<class 'numpy.ndarray'>",
        ":serialized:": "gASViQAAAAAAAACMFW51bXB5LmNvcmUubXVsdGlhcnJheZSMDF9yZWNvbnN0cnVjdJSTlIwFbnVtcHmUjAduZGFycmF5lJOUSwCFlEMBYpSHlFKUKEsBSwGFlGgDjAVkdHlwZZSTlIwCYjGUiYiHlFKUKEsDjAF8lE5OTkr/////Sv////9LAHSUYolDAQGUdJRiLg=="
    },
    "_last_original_obs": {
        ":type:": "<class 'numpy.ndarray'>",
        ":serialized:": "gASVqgAAAAAAAACMFW51bXB5LmNvcmUubXVsdGlhcnJheZSMDF9yZWNvbnN0cnVjdJSTlIwFbnVtcHmUjAduZGFycmF5lJOUSwCFlEMBYpSHlFKUKEsBSwFLCIaUaAOMBWR0eXBllJOUjAJmNJSJiIeUUpQoSwOMATyUTk5OSv////9K/////0sAdJRiiUMgAAAAAAAAAAAAAMhDAAAAAAAAAAAAAAAAAADIQwAAAACUdJRiLg=="
    },
    "_episode_num": 6445,
    "use_sde": false,
    "sde_sample_freq": -1,
    "_current_progress_remaining": 0.86800002,
    "ep_info_buffer": {
        ":type:": "<class 'collections.deque'>",
        ":serialized:": "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"
    },
    "ep_success_buffer": {
        ":type:": "<class 'collections.deque'>",
        ":serialized:": "gASVIAAAAAAAAACMC2NvbGxlY3Rpb25zlIwFZGVxdWWUk5QpS2SGlFKULg=="
    },
    "_n_updates": 658999,
    "buffer_size": 1000000,
    "batch_size": 1024,
    "learning_starts": 10000,
    "tau": 0.005,
    "gamma": 0.995,
    "gradient_steps": 1,
    "optimize_memory_usage": false,
    "replay_buffer_class": {
        ":type:": "<class 'abc.ABCMeta'>",
        ":serialized:": "gASVNQAAAAAAAACMIHN0YWJsZV9iYXNlbGluZXMzLmNvbW1vbi5idWZmZXJzlIwMUmVwbGF5QnVmZmVylJOULg==",
        "__module__": "stable_baselines3.common.buffers",
        "__doc__": "\n    Replay buffer used in off-policy algorithms like SAC/TD3.\n\n    :param buffer_size: Max number of element in the buffer\n    :param observation_space: Observation space\n    :param action_space: Action space\n    :param device:\n    :param n_envs: Number of parallel environments\n    :param optimize_memory_usage: Enable a memory efficient variant\n        of the replay buffer which reduces by almost a factor two the memory used,\n        at a cost of more complexity.\n        See https://github.com/DLR-RM/stable-baselines3/issues/37#issuecomment-637501195\n        and https://github.com/DLR-RM/stable-baselines3/pull/28#issuecomment-637559274\n        Cannot be used in combination with handle_timeout_termination.\n    :param handle_timeout_termination: Handle timeout termination (due to timelimit)\n        separately and treat the task as infinite horizon task.\n        https://github.com/DLR-RM/stable-baselines3/issues/284\n    ",
        "__init__": "<function ReplayBuffer.__init__ at 0x7fbca8f508c0>",
        "add": "<function ReplayBuffer.add at 0x7fbca8f50950>",
        "sample": "<function ReplayBuffer.sample at 0x7fbca8f509e0>",
        "_get_samples": "<function ReplayBuffer._get_samples at 0x7fbca8f50a70>",
        "__abstractmethods__": "frozenset()",
        "_abc_impl": "<_abc_data object at 0x7fbca8f4d180>",
        "__slotnames__": []
    },
    "replay_buffer_kwargs": {},
    "train_freq": {
        ":type:": "<class 'stable_baselines3.common.type_aliases.TrainFreq'>",
        ":serialized:": "gASVYQAAAAAAAACMJXN0YWJsZV9iYXNlbGluZXMzLmNvbW1vbi50eXBlX2FsaWFzZXOUjAlUcmFpbkZyZXGUk5RLCmgAjBJUcmFpbkZyZXF1ZW5jeVVuaXSUk5SMBHN0ZXCUhZRSlIaUgZQu"
    },
    "use_sde_at_warmup": false,
    "target_entropy": {
        ":type:": "<class 'numpy.float32'>",
        ":serialized:": "gASVZQAAAAAAAACMFW51bXB5LmNvcmUubXVsdGlhcnJheZSMBnNjYWxhcpSTlIwFbnVtcHmUjAVkdHlwZZSTlIwCZjSUiYiHlFKUKEsDjAE8lE5OTkr/////Sv////9LAHSUYkMEAAAAwJSGlFKULg=="
    },
    "log_ent_coef": null,
    "ent_coef": 0.00083,
    "target_update_interval": 50,
    "ent_coef_optimizer": null
}